-- 기본적으로 장고 프로젝트 한 개당 한 개의 DB를 사용한다.
-- 장고 프로젝트에는 기본적으로 관리프로그램이 내장되기 때문이다.
-- postgressql에 DB 생성 및  계정 생성 / 접근권한
1. create database djdb;
2. create user djdb with password 'djdb';
3. grant all privileges on all tables in schema public to djdb;
4. data/pg_hba.conf 접근 설정

-- pycharm(cummunity) 에서 Django 프로젝트 시작하기

1. pycharm 프로젝트 생성(python 프로젝트)

2. Django 설치(pycharm프로젝트 안에 설치)
   [터미널]
   pip install django

3. 장고 프로젝트 생성
   [터미널]
   django-admin startproject python_ch3

4. 디렉토리 정리
   -> 파이참 프로젝트와  django 프로젝트의 디렉토리 일치시키는 작업

5. psycopg2(postgres db lib) 설치
    [터미널]
    pip install psycopg2

6. settings.py 설정
    1) TIME_ZONE = 'Asia/Seoul'
    2)DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'djdb',
            'USER': 'djdb',
            'PASSWORD':'djdb',
            'HOST':'192.168.1.38',
            'PORT': 5432
        }
    }
    3)Template 디렉토리 설정(settings.py)
    TEMPLATES = [
        {
            ...
            'DIRS': [os.path.join(BASE_DIR,'template')],
            ...
        }
    ]

    python_ch3
        | ------ templates

7. 장고 프로젝트의 기본 관리 application이 사용하는 관리하는 테이블을 생성
    [터미널]
    python manage.py migrate

8. 장고 프로젝트의 기본 관리 어플리케이션 로그인 계정 생성하기
    (관리 계정 생성하기)
    [터미널]
    python manage.py createsuperuser

    tgif
    tgif@naver.com
    1234
    1234
    y

9. 지금까지 작업 내용 확인하기
    [터미널]
    python manage.py runserver 0.0.0.0:8881
========================================================================

Application 작업
    1) helloworld
        1. 어플리케이션 추가
            [터미널]
            python manage.py startapp helloworld
        2. 어플리케이션 등록(settings.py)
            INSTALLED_APPS 에
                'helloworld', 추가
        3. templates
            | --- hellowrold
            어플리 케이션 templates 디렉토리 생성
        4. model 정의(helloworld는 생략)
        5. urls.py에서 url-view의 handler mapping
        6. views.py에서 핸들러 함수 구현(요청처리,모델작업,응답처리)
        7. 화면이 필요한 경우, 해당 template 작업

    1) emaillist
        1. 어플리케이션 추가
            [터미널]
            python manage.py startapp helloworld
        2. 어플리케이션 등록(settings.py)
            INSTALLED_APPS 에
                'emaillist', 추가
        3. templates
            | --- hellowrold
            어플리 케이션 templates 디렉토리 생성
        4. model 정의
            4.1. Model 정의 - 모델이 하나 추가 될 때마다 4.3과 4.4를 !!!!반드시!!!! 실행해야 한다.
            4.2. admin.py에 (생략가능)
                admin.site.register(Emaillist)
            4.3. migrations 이름의 DDL python 모듈을 생성
                python manage.py makemigrations
            4.4. 물리 DB와  스키마 동기화 작업을 한다.
                python manage.py migrate
        5. urls.py에서 url-view의 handler mapping
        6. views.py에서 핸들러 함수 구현(요청처리,모델작업,응답처리)
        7. 화면이 필요한 경우, 해당 template 작업
